@helper ImageUploader(int id, string imageSrc, string controlId = "ImageControl", string waitingImage = "", string TooltipMessage = "", string ToolTipPlacement = "bottom")
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    imageSrc = Url.Content(imageSrc);
    controlId = Url.Content(controlId);
    waitingImage = Url.Content(waitingImage);
    <fieldset>
        <div class='imageUploader' id='@id' controlId='@controlId' imageSrc='@imageSrc' waitingImage='@waitingImage'
             data-toggle="tooltip"
             data-placement="@ToolTipPlacement"
             title="@TooltipMessage"> </div>
    </fieldset>
}

@helper AvatarProfilLink(EFA_DEMO.Models.UserView user)
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    var avatarUrl = Url.Content(user.GetAvatarURL());
    var linkUrl = Url.Action("Profil", "Users");
    <a href="@linkUrl" data-toogle="tooltip" title="Modifier le profil">
        <div class="smallAvatar"
             style="background: url(@avatarUrl) no-repeat center center; background-size: cover;"></div>
        <span class="menuTitle">&nbsp;@user.FullName</span>
    </a>
}

@helper AvatarUser(EFA_DEMO.Models.UserView user)
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    var avatarUrl = Url.Content(user.GetAvatarURL());
    <div>
        <div class="smallAvatar"
             style="background: url(@avatarUrl) no-repeat center center; background-size: cover; float:left;"></div>
        <div class="ellipsis" style="float:none;">&nbsp;@user.FullName</div>
    </div>
    <br />
}

@helper When(DateTime date)
{
    TimeSpan span = DateTime.Now.Subtract(date);
    if (span.Days > 0)
    {
        <div style="float:left">@date.ToLongDateString() - </div>
        <div class="glyphicon glyphicon-time smallGlyphicon" title="@date.ToShortTimeString()" data-placement="right"></div>
    }
    else
    {
        if (span.Hours > 1)
        {
            <span>@span.Hours heures</span>
        }
        else
        {
            if (span.Minutes > 1)
            {
                <span>@span.Minutes minutes</span>
            }
            else
            {
                <span>à l'instant</span>
            }
        }
    }
}

@helper Poster(EFA_DEMO.Models.UserView user, DateTime date)
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    var avatarUrl = Url.Content(user.GetAvatarURL());
    <div style="margin-top:-6px;">
        <div class="mediumAvatar"
             style="background: url(@avatarUrl) no-repeat center center; background-size: cover; float:left;">
        </div>
        <div class="nameDate">
            <div class="ellipsis">@Helper.UserOfTargetPost(user)</div>
            <div class="ellipsis">@Helper.When(date)</div>
        </div>
    </div>
    <br />
}

@helper GlyphiconCmd(string glyphiconClass, string TooltipMessage, string ToolTipPlacement = "bottom")
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    <div style="cursor:pointer">
        <span class="glyphicon glyphiconStyle @glyphiconClass"
              title="@TooltipMessage"
              data-placement="@ToolTipPlacement">
        </span>
    </div>
}
@helper GlyphiconAction(string Action, string glyphiconClass, string TooltipMessage, string ToolTipPlacement = "bottom")
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    <a href="@Url.Action(Action)">
        <span class="glyphicon glyphiconStyle @glyphiconClass"
              title="@TooltipMessage"
              data-placement="@ToolTipPlacement">
        </span>
    </a>
}
@helper GlyphiconActionAndParams(string Action, string parameters, string glyphiconClass, string TooltipMessage, string ToolTipPlacement = "bottom")
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    string actionUrl = Url.Action(Action) + parameters;
    <a href="@actionUrl">
        <span class="glyphicon glyphiconStyle @glyphiconClass"
              title="@TooltipMessage"
              data-placement="@ToolTipPlacement">
        </span>
    </a>
}
@helper GlyphiconConfirmAction(string Action, string glyphiconClass, string TooltipMessage, string ToolTipPlacement = "bottom")
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    <div onclick='confirm("@TooltipMessage","@Url.Action(Action)")'>
        <span class="glyphicon glyphiconStyle @glyphiconClass"
              title="@TooltipMessage"
              data-placement="@ToolTipPlacement">
        </span>
    </div>
}
@helper GlyphiconAjaxAction(string Action, string glyphiconClass, string TooltipMessage, string ToolTipPlacement = "bottom")
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    <div onclick='ajaxActionCall("@Url.Action(Action)")'>
        <span class="glyphicon glyphiconStyle @glyphiconClass"
              title="@TooltipMessage"
              data-placement="@ToolTipPlacement">
        </span>
    </div>
}
@helper GlyphiconAjaxControllerAction(string controller, string Action, string glyphiconClass, string TooltipMessage, string ToolTipPlacement = "bottom")
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    <div onclick='ajaxActionCall("@Url.Action(Action, controller)")'>
        <div style="margin-top:12px;margin-left:12px">
            <span class="glyphicon glyphiconStyle @glyphiconClass"
                  title="@TooltipMessage"
                  data-placement="@ToolTipPlacement">
            </span>
        </div>
    </div>
}
@helper GlyphiconControllerAction(string controller, string Action, string glyphiconClass, string TooltipMessage, string ToolTipPlacement = "bottom")
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    <a href="@Url.Action(Action, controller)">
        <span class="glyphicon glyphiconStyle @glyphiconClass"
              title="@TooltipMessage"
              data-placement="@ToolTipPlacement">
        </span>
    </a>
}


@helper ParseContent(string content)
{
    string[] tokens = content.Split(' ');
    foreach (var token in tokens)
    {
        var t = token.ToLower();
        if (t.Contains("http://") || t.Contains("https://"))
        {
            if (t.Contains(".webp"))
            {
                var image = token.Replace(".webp", "");
                var webp = image + ".webp";
                var png = image + ".png";
                var jpg = image + ".jpg";
                <picture>
                    <source type="image/webp" srcset="@webp">
                    <source type="image/png" srcset="@png">
                    <img src="@jpg" style="width: 100%;">
                </picture>
            }
            else
            {
                if (t.Contains(".jpg") || t.Contains(".png") || t.Contains(".bmp"))
                {

                    <a href="@token" target="_blank">
                        <img class="contentImage" src="@token" alt="" />
                    </a>
                }
                else
                {
                    if (token.Contains("https://www.youtube.com/watch?v="))
                    {
                        string youtubeId = token.Replace("https://www.youtube.com/watch?v=", "");
                        if (youtubeId.IndexOf("&") > -1)
                        {
                            youtubeId = youtubeId.Substring(0, youtubeId.IndexOf("&"));
                        }
                        string youtubeThumbnail = "http://i3.ytimg.com/vi/" + youtubeId + "/maxresdefault.jpg";
                        <a href="@token" target="_blank">
                            <img class="contentImage" src="@youtubeThumbnail" alt="" />
                        </a>
                    }
                    else
                    {
                        <a href="@token" target="_blank">@token</a>
                    }
                }
            }
        }
        else
        {
            if (t.Contains("[hr]"))
            {
                <hr />
            }
            else
            {
                <span>@token</span>
            }
        }
    }
}

@helper Tags(string tags)
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    if (tags != null)
    {
        string[] tagsArray = tags.Split(' ');
        foreach (var tag in tagsArray)
        {
            var linkUrl = Url.Action("SetTag", "Posts") + "?tag=" + tag;
            <a href="@linkUrl">#@tag</a>
        }
    }
}

@helper Post(EFA_DEMO.Models.PostView postView, EFA_DEMO.Models.UserView user)
{
    bool editMode = postView.Id == (int)Session["EditingPostId"];
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);

    if (!editMode)
    {
        <div class="post">
            <div class="postHeader">
                @Helper.Poster(postView.User, postView.CreationDate)

                @if (postView.UserId == user.Id || user.Admin)
                {
                    <div> &nbsp; </div>
                    <div class="waitCmd">
                        @Helper.GlyphiconAjaxAction("SetEditMode/" + postView.Id, "glyphicon-edit", "Modifier " + postView.Title)
                    </div>
                    @Helper.GlyphiconConfirmAction("Delete/" + postView.Id, "glyphicon-remove-circle", "Effacer " + postView.Title)
                }
                else
                {
                    <div> &nbsp; </div> <div> &nbsp; </div> <div> &nbsp; </div>
                }

                @Helper.GlyphiconAjaxAction("CreatePost/" + postView.Id, "glyphicon-comment", "Commenter...")
                <div>
                    <div style="text-align:right">
                        @if (postView.LikeCount >= 1)
                        {
                            <div class="likesCount" postId="@postView.Id" postTitle="@postView.Title">
                                @postView.LikeCount &nbsp;
                            </div>
                        }
                        else
                        {
                            <div class="likesCount">0&nbsp;</div>
                        }
                    </div>
                </div>
                <div class="waitCmd">
                    @if (postView.CurrentUserLike)
                    {
                        @Helper.GlyphiconAjaxAction("RemoveLike/" + postView.Id, "glyphicon-thumbs-up", "Vous n'aimez plus...")
                    }
                    else
                    {
                        @Helper.GlyphiconAjaxAction("AddLike/" + postView.Id, "glyphicon-thumbs-up", "Vous aimez ...")
                    }
                </div>

            </div>
            <div class="postTitle">
                <div class="title">
                    @postView.Title
                </div>
            </div>
            <div class="postContent">@Helper.ParseContent(postView.Content)</div>
            <div class="tags">
                <div style="font-size:16px;">@Helper.Tags(postView.Tags)</div>
            </div>
            @if (postView.PostsChilds != null)
            {
                if (postView.PostsChilds.Count > 0)
                {
                    <div class="postChild">
                        @foreach (EFA_DEMO.Models.PostsChild postchild in postView.PostsChilds)
                        {
                            EFA_DEMO.Models.PostView childPostview = new EFA_DEMO.Models.PostView();
                            childPostview.Copy(postchild.PostChild);
                            @Helper.PostComment(childPostview, user, postView.User);
                        }
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="post">
            <div class="postHeader">
                @Helper.Poster(postView.User, postView.CreationDate)
                <div> &nbsp; </div> <div> &nbsp; </div> <div> &nbsp; </div>
                <div> &nbsp; </div> <div> &nbsp; </div> <div> &nbsp; </div>
            </div>
            <div class="postTitle">
                <input type="hidden" id="postId" value="@postView.Id" />
                <div>
                    <input id="Title" value=" @postView.Title" placeholder="Titre" class="form-control" />
                </div>
            </div>
            <div class="postContentEdit">
                <br />
                <textarea id="Content" class="form-control replyContent" style="width:100%" postId="@postView.Id" placeholder="Contenu" required>@postView.Content</textarea>
            </div>
            <br>
            <div>
                <input id="Tags" value=" @postView.Tags" placeholder="Étiquettes" class="form-control" />
            </div>
            <br />
            <div class="waitCmd">
                <button id="SubmitPostView" class="btn btn-primary">Soumettre</button>
                &nbsp;
                <button id="CancelEdit" class="btn btn-default">Annuler</button>
            </div>


            @if (postView.PostsChilds != null)
            {
                if (postView.PostsChilds.Count > 0)
                {
                    <div class="postChild">
                        @foreach (EFA_DEMO.Models.PostsChild postchild in postView.PostsChilds)
                        {
                            EFA_DEMO.Models.PostView childPostview = new EFA_DEMO.Models.PostView();
                            childPostview.Copy(postchild.PostChild);
                            @Helper.PostComment(childPostview, user, postView.User);
                        }
                    </div>
                }
            }
        </div>
    }
}

@helper UserOfTargetPost(EFA_DEMO.Models.UserView user = null, string prefix = "")
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    if (user != null)
    {
        string targetUser = prefix + user.FullName.Trim();
        string targetUrl = Url.Action("SetRootUserPosts/") + user.Id;
        <span class="targetUser"><a href="@targetUrl">@targetUser</a></span>
    }
    else
    {
        string targetUrl = Url.Action("SetRootUserPosts/0");
        <span class="targetUser"><a href="@Url.Action("SetRootUserPosts/0")" class="glyphicon glyphicon-arrow-left glyphiconStyle"></a></span>
    }
}

@helper PostComment(EFA_DEMO.Models.PostView postView, EFA_DEMO.Models.UserView user, EFA_DEMO.Models.UserView parentUser)
{
    var Url = new System.Web.Mvc.UrlHelper(HttpContext.Current.Request.RequestContext);
    bool editMode = postView.Id == (int)Session["EditingPostId"];
    if (!editMode)
    {

        <div class="post comment">
            <div class="postHeader">
                @Helper.Poster(postView.User, postView.CreationDate)

                @if (postView.UserId == user.Id || user.Admin)
                {
                    <div> &nbsp; </div>
                    <div class="waitCmd">
                        @Helper.GlyphiconAjaxAction("SetEditMode/" + postView.Id, "glyphicon-edit", "Modifier " + postView.Title)
                    </div>
                    @Helper.GlyphiconConfirmAction("Delete/" + postView.Id, "glyphicon-remove-circle", "Effacer " + postView.Title)
                }
                else
                {
                    <div> &nbsp; </div> <div> &nbsp; </div> <div> &nbsp; </div>
                }
                @Helper.GlyphiconAjaxAction("CreatePost/" + postView.Id, "glyphicon-comment", "Commenter...")
                <div>
                    <div style="text-align:right">
                        @if (postView.LikeCount >= 1)
                        {
                            <div class="likesCount" postId="@postView.Id" postTitle="@postView.Title">
                                @postView.LikeCount &nbsp;
                            </div>
                        }
                        else
                        {
                            <div class="likesCount">0&nbsp;</div>
                        }
                    </div>
                </div>
                <div class="waitCmd">
                    @Helper.GlyphiconAjaxAction("AddLike/" + postView.Id, "glyphicon-thumbs-up", "ajouter/enlever...")
                </div>
            </div>
            <div class="postContent">@UserOfTargetPost(parentUser, "@") @Helper.ParseContent(postView.Content)</div>
            @if (postView.PostsChilds != null)
            {
                if (postView.PostsChilds.Count > 0)
                {
                    <div class="postChild">

                        @foreach (EFA_DEMO.Models.PostsChild postchild in postView.PostsChilds)
                        {
                            EFA_DEMO.Models.PostView childPostview = new EFA_DEMO.Models.PostView();
                            childPostview.Copy(postchild.PostChild);
                            @Helper.PostComment(childPostview, user, postView.User);
                        }
                    </div>
                }
            }
        </div>
    }
    else
    {
        <div class="post comment">
            <div class="postHeader">
                @Helper.Poster(postView.User, postView.CreationDate)

                <div> &nbsp; </div> <div> &nbsp; </div> <div> &nbsp; </div>
                <div> &nbsp; </div> <div> &nbsp; </div>
            </div>
            <div class="postContentEdit">
                @UserOfTargetPost(parentUser) <br />
                <input type="hidden" id="postId" value="@postView.Id" />
                <textarea class="form-control replyContent"
                          id="replyContent"
                          style="width:100%">@postView.Content</textarea>
                <br>
                <div class="waitCmd">
                    <input type="submit" id="SubmitPostViewReplyContent" class="btn btn-primary" value="Soumettre">
                    &nbsp;
                    <button id="CancelEdit" class="btn btn-default">Annuler</button>
                </div>
            </div>
            @if (postView.PostsChilds != null)
            {
                if (postView.PostsChilds.Count > 0)
                {
                    <div class="postChild">

                        @foreach (EFA_DEMO.Models.PostsChild postchild in postView.PostsChilds)
                        {
                            EFA_DEMO.Models.PostView childPostview = new EFA_DEMO.Models.PostView();
                            childPostview.Copy(postchild.PostChild);
                            @Helper.PostComment(childPostview, user, postView.User);
                        }
                    </div>
                }
            }
        </div>
    }
}
